# -*- coding: utf-8 -*-
"""Copy of Essaygrader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1U59j4PmC1Wrv0a4vHNKUDpI8Si0-JZ
"""

!pip install pandas scikit-learn nltk
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import re

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('CSV essay dataset.csv', encoding='latin1')

def preprocess_text(text):
    if pd.isna(text):
        return ''
    text = re.sub(r'\W', ' ', text)  # Remove punctuation
    text = text.lower()               # Convert to lowercase
    text = re.sub(r'\s+', ' ', text).strip()  # Normalize whitespace
    return text

df['Processed_Essay'] = df['Essay_Text'].apply(preprocess_text)

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf_vectorizer = TfidfVectorizer()
X_tfidf = tfidf_vectorizer.fit_transform(df['Processed_Essay'])

y = df['Numerical_score']

X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

df.dropna(subset=['Numerical_score'], inplace=True)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import re
from google.colab import files
from sklearn.feature_extraction.text import TfidfVectorizer
!pip install pandas scikit-learn nltk
uploaded = files.upload()
df = pd.read_csv('CSV essay dataset.csv', encoding='latin1')

def preprocess_text(text):
    if pd.isna(text):
        return ''
    text = re.sub(r'\W', ' ', text)  # Remove punctuation
    text = text.lower()               # Convert to lowercase
    text = re.sub(r'\s+', ' ', text).strip()  # Normalize whitespace
    return text

df['Processed_Essay'] = df['Essay_Text'].apply(preprocess_text)

# Remove rows with NaN values in 'Numerical_score' before TF-IDF
df.dropna(subset=['Numerical_score'], inplace=True)

tfidf_vectorizer = TfidfVectorizer()
X_tfidf = tfidf_vectorizer.fit_transform(df['Processed_Essay'])
y = df['Numerical_score']
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

model = RandomForestRegressor()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f'MAE: {mae}, MSE: {mse}')

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100],
    'max_depth': [None, 10, 20],
}

grid_search = GridSearchCV(RandomForestRegressor(), param_grid, cv=5)
grid_search.fit(X_train, y_train)

print(f'Best parameters: {grid_search.best_params_}')

best_model = grid_search.best_estimator_
best_model.fit(X_train, y_train)

import joblib
joblib.dump(best_model, 'automated_essay_grader.pkl')

new_essays = ["Type_essay_here"]
new_essays_processed = [preprocess_text(essay) for essay in new_essays]
new_essays_tfidf = tfidf_vectorizer.transform(new_essays_processed)

predictions = best_model.predict(new_essays_tfidf)
print(f'Predicted Scores: {predictions}')